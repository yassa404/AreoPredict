{"cells":[{"cell_type":"code","source":["WAQI Data Prep\n"],"metadata":{"id":"8NNlWwcgPkWx"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ca-cyOgePCUF","outputId":"8c5d2fb3-1570-4cc1-823c-49e5381784f0"},"outputs":[{"name":"stdout","output_type":"stream","text":["../Data/waqi_downloads/waqi-covid19-airqualitydata-2015H1.csv\r\n","../Data/waqi_downloads/waqi-covid19-airqualitydata-2016H1.csv\r\n","../Data/waqi_downloads/waqi-covid19-airqualitydata-2017H1.csv\r\n","../Data/waqi_downloads/waqi-covid19-airqualitydata-2018H1.csv\r\n","../Data/waqi_downloads/waqi-covid19-airqualitydata-2019Q1.csv\r\n","../Data/waqi_downloads/waqi-covid19-airqualitydata-2019Q2.csv\r\n","../Data/waqi_downloads/waqi-covid19-airqualitydata-2019Q3.csv\r\n","../Data/waqi_downloads/waqi-covid19-airqualitydata-2019Q4.csv\r\n","../Data/waqi_downloads/waqi-covid19-airqualitydata-2020.csv\r\n"]}],"source":["# Check that the files are present\n","!ls ../Data/waqi_downloads/*.csv"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"t0lzaGb1PCUH","outputId":"931c92eb-cbd2-46f3-9652-4a8ba19fe3d5"},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Date</th>\n","      <th>Country</th>\n","      <th>City</th>\n","      <th>Specie</th>\n","      <th>count</th>\n","      <th>min</th>\n","      <th>max</th>\n","      <th>median</th>\n","      <th>variance</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2016-02-03</td>\n","      <td>SE</td>\n","      <td>Stockholm</td>\n","      <td>o3</td>\n","      <td>24</td>\n","      <td>15.0</td>\n","      <td>23.1</td>\n","      <td>17.6</td>\n","      <td>68.93</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2016-02-04</td>\n","      <td>SE</td>\n","      <td>Stockholm</td>\n","      <td>o3</td>\n","      <td>24</td>\n","      <td>9.2</td>\n","      <td>25.7</td>\n","      <td>17.8</td>\n","      <td>252.52</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2016-02-16</td>\n","      <td>SE</td>\n","      <td>Stockholm</td>\n","      <td>o3</td>\n","      <td>24</td>\n","      <td>3.8</td>\n","      <td>21.1</td>\n","      <td>15.4</td>\n","      <td>193.79</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2016-03-11</td>\n","      <td>SE</td>\n","      <td>Stockholm</td>\n","      <td>o3</td>\n","      <td>24</td>\n","      <td>1.0</td>\n","      <td>29.2</td>\n","      <td>15.6</td>\n","      <td>1085.12</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2016-04-02</td>\n","      <td>SE</td>\n","      <td>Stockholm</td>\n","      <td>o3</td>\n","      <td>24</td>\n","      <td>22.8</td>\n","      <td>27.0</td>\n","      <td>25.6</td>\n","      <td>16.40</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         Date Country       City Specie  count   min   max  median  variance\n","0  2016-02-03      SE  Stockholm     o3     24  15.0  23.1    17.6     68.93\n","1  2016-02-04      SE  Stockholm     o3     24   9.2  25.7    17.8    252.52\n","2  2016-02-16      SE  Stockholm     o3     24   3.8  21.1    15.4    193.79\n","3  2016-03-11      SE  Stockholm     o3     24   1.0  29.2    15.6   1085.12\n","4  2016-04-02      SE  Stockholm     o3     24  22.8  27.0    25.6     16.40"]},"execution_count":2,"metadata":{},"output_type":"execute_result"}],"source":["import pandas as pd\n","import glob\n","\n","csvs = glob.glob('../Data/waqi_downloads/*.csv')\n","df = pd.concat([pd.read_csv(csv, skiprows=4) for csv in csvs])\n","df.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-9tf02iWPCUH"},"outputs":[],"source":["#select only pm2.5 pollutants ad save\n","df=df[['Date','Country','City','median']].loc[df['Specie']=='pm25']\n","df.rename(columns={'median':'Median_PM25'},inplace=True)\n","df.to_csv('../Data/intermediate/waqi_pm25.csv', index=False)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8zLMikZ8PCUJ","outputId":"4dff7fe9-8574-4b91-ead5-d2d6f301e739"},"outputs":[{"name":"stdout","output_type":"stream","text":["  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","                                 Dload  Upload   Total   Spent    Left  Speed\n","100  537k  100  537k    0     0  77078      0  0:00:07  0:00:07 --:--:--  118k\n"]}],"source":["# Download the file\n","!curl https://aqicn.org/data-platform/covid19/airquality-covid19-cities.json > ../Data/waqi_downloads/airquality-covid19-cities.json"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vJy-EwIMPCUJ","outputId":"2ef370d5-f2f7-4523-ebfa-e5712f869e37"},"outputs":[{"data":{"text/plain":["{'Place': {'geo': [13.68935, -89.18718],\n","  'feature': 'PPLC',\n","  'name': 'San Salvador',\n","  'country': 'SV',\n","  'pop': 525990},\n"," 'Sources': [{'name': 'Citizen Weather Observer Program (CWOP/APRS)',\n","   'url': 'http://wxqa.com/',\n","   'pols': ['weather'],\n","   'logo': ''},\n","  {'name': 'Ministerio de Medio Ambiente y Recursos Naturales (MARN) de Salvaodor',\n","   'url': 'http://www.snet.gob.sv/ver/meteorologia/monitoreo/calidad+del+aire/',\n","   'pols': None,\n","   'logo': 'ElSalvador-MinisterioMedioAmbiente.png'},\n","  {'name': 'Universidad Tecnol√≥gica de El Salvador',\n","   'url': 'https://sites.google.com/mail.utec.edu.sv/estacionsantaana',\n","   'pols': None,\n","   'logo': 'ElSalvador-UniversidadTecnologica.png'}],\n"," 'Stations': [{'Name': 'San Salvador Este, El Salavor'},\n","  {'Name': 'San Salvador Centro, El Salavor'},\n","  {'Name': 'UTEC Campus, San Salvador, El Salavor'}]}"]},"execution_count":5,"metadata":{},"output_type":"execute_result"}],"source":["# Load the city info\n","import json\n","cities = json.load(open('../Data/waqi_downloads/airquality-covid19-cities.json', 'r'))\n","cities['data'][0] # An example"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VfWXvX2sPCUK","outputId":"241d3d6a-09a2-4a5a-8cbc-2da1d174c705"},"outputs":[{"name":"stdout","output_type":"stream","text":["Error on: Washington D.C.\n"]}],"source":["# Find and store the locations of all the cities in our dataset\n","city_locations = {}\n","for city in df.City.unique():\n","    data = next((item for item in cities['data'] if item[\"Place\"]['name'] == city), None)\n","    if data == None:\n","        print('Error on:', city)\n","    else:\n","        city_locations[city] = data['Place']['geo']"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oIbtVIxWPCUL"},"outputs":[],"source":["# Manual Fix for DC\n","data = next((item for item in cities['data'] if 'Washington' in item[\"Place\"]['name']), None)\n","city_locations['Washington D.C.'] = data['Place']['geo']"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ri22KEG-PCUL","outputId":"8cdfd69c-136f-4002-a1bc-2f31cf5248f4"},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Date</th>\n","      <th>Country</th>\n","      <th>City</th>\n","      <th>Median_PM25</th>\n","      <th>Lat</th>\n","      <th>Long</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>186</th>\n","      <td>2016-02-15</td>\n","      <td>SE</td>\n","      <td>Stockholm</td>\n","      <td>17.0</td>\n","      <td>59.32938</td>\n","      <td>18.06871</td>\n","    </tr>\n","    <tr>\n","      <th>187</th>\n","      <td>2016-03-11</td>\n","      <td>SE</td>\n","      <td>Stockholm</td>\n","      <td>54.0</td>\n","      <td>59.32938</td>\n","      <td>18.06871</td>\n","    </tr>\n","    <tr>\n","      <th>188</th>\n","      <td>2016-04-18</td>\n","      <td>SE</td>\n","      <td>Stockholm</td>\n","      <td>14.0</td>\n","      <td>59.32938</td>\n","      <td>18.06871</td>\n","    </tr>\n","    <tr>\n","      <th>189</th>\n","      <td>2016-04-27</td>\n","      <td>SE</td>\n","      <td>Stockholm</td>\n","      <td>23.0</td>\n","      <td>59.32938</td>\n","      <td>18.06871</td>\n","    </tr>\n","    <tr>\n","      <th>190</th>\n","      <td>2016-05-25</td>\n","      <td>SE</td>\n","      <td>Stockholm</td>\n","      <td>11.0</td>\n","      <td>59.32938</td>\n","      <td>18.06871</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["           Date Country       City  Median_PM25       Lat      Long\n","186  2016-02-15      SE  Stockholm         17.0  59.32938  18.06871\n","187  2016-03-11      SE  Stockholm         54.0  59.32938  18.06871\n","188  2016-04-18      SE  Stockholm         14.0  59.32938  18.06871\n","189  2016-04-27      SE  Stockholm         23.0  59.32938  18.06871\n","190  2016-05-25      SE  Stockholm         11.0  59.32938  18.06871"]},"execution_count":9,"metadata":{},"output_type":"execute_result"}],"source":["# Add to our dataframe\n","df['Lat'] = df['City'].map(lambda x: city_locations[x][0])\n","df['Long'] = df['City'].map(lambda x: city_locations[x][1])\n","df.to_csv('../Data/intermediate/citypm25.csv',index=False)\n","df.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GKVpSyEXPCUM","outputId":"2f7718c5-88a5-4be7-984b-1b631375b462"},"outputs":[{"data":{"text/plain":["Date           0\n","Country        0\n","City           0\n","Median_PM25    0\n","Lat            0\n","Long           0\n","dtype: int64"]},"execution_count":10,"metadata":{},"output_type":"execute_result"}],"source":["# Check 1 - make sure there aren't missing values\n","df.isna().sum()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"94uastqjPCUM","outputId":"6ca6de4e-28c1-4be8-a6fa-ce2a0117f09a"},"outputs":[{"data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7ff506aac6d0>"]},"execution_count":12,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"needs_background":"light"},"output_type":"display_data"}],"source":["# Check 2 - look at the map\n","df.groupby('City').mean().plot(x='Long', y='Lat', kind='scatter', c='Median_PM25')"]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.6"},"colab":{"provenance":[]}},"nbformat":4,"nbformat_minor":0}